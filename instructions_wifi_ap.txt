sudo apt-get update
sudo apt-get upgrade
sudo apt-get install python3-venv

mkdir projects
sudo -H pip3 install virtualenv
pwd
python3 -m venv /home/stefano/projects/v_users_mgmt

source /home/stefano/projects/v_users_mgmt/bin/activate

git clone -b master https://github.com/Stefanotuv/users_mgmt.git

-- in case there are changes applied to the remote host directly
cd /home/stefano/projects/users_mgmt
git stash
git pull

pip install -r /home/stefano/projects/users_mgmt/requirements.txt

python /home/stefano/projects/users_mgmt/manage.py runserver 0.0.0.0:8080

----------------------------------------------

now django in production:

source /home/stefano/projects/v_users_mgmt/bin/activate
cd /home/stefano/projects/users_mgmt/
gunicorn --bind 0.0.0.0:8000 users_mgmt.wsgi

sudo mkdir /var/log/gunicorn

sudo nano /etc/systemd/system/gunicorn.socket
# ---------------------------------------------------------------------------
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target
# ---------------------------------------------------------------------------

sudo nano /etc/systemd/system/gunicorn.service
# ---------------------------------------------------------------------------
[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=stefano
Group=www-data
WorkingDirectory=/home/stefano/projects/users_mgmt
ExecStart=/home/stefano/projects/v_users_mgmt/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunicorn.sock users_mgmt.wsgi:application

[Install]
WantedBy=multi-user.target
# ---------------------------------------------------------------------------

# start the service
sudo systemctl start gunicorn.socket
sudo systemctl enable gunicorn.socket

sudo systemctl start gunicorn
sudo systemctl enable gunicorn

# check status

sudo systemctl status gunicorn

# restart if you change any python file
sudo systemctl daemon-reload
sudo systemctl restart gunicorn

# ----- ----- ----- ----- INSTALL NGINX ----- ----- ----- ----- ----- ----- -----
# install the server
sudo apt-get install nginx

# create the files and link for NGINIX
sudo nano /etc/nginx/sites-available/users_mgmt

****************
server {
    listen 80;
    server_name 192.168.1.135;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/stefano/projects/users_mgmt;
    }
    location /media/ {
        root /home/stefano/projects/users_mgmt;
    }
    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}
****************


# Prepare the static files. This step is necessary to put all files on the folder static
# without this steps the CSS and JS files cannot be served to the server
source /home/stefano/projects/v_users_mgmt/bin/activate
python /home/stefano/projects/users_mgmt/manage.py collectstatic




sudo gpasswd -a www-data root
sudo gpasswd -a www-data stefano
sudo -u www-data stat /home/stefano/projects/users_mgmt/static
sudo chown www-data:www-data /run/gunicorn.sock



# enable the file by linking it to the sites-enabled directory
sudo ln -s /etc/nginx/sites-available/users_mgmt /etc/nginx/sites-enabled

# test nginx
sudo nginx -t

# restart if you change any python file
sudo systemctl daemon-reload
sudo systemctl restart gunicorn
# restart server.
sudo nginx -s reload
sudo systemctl restart nginx
sudo systemctl status nginx

----------------------------------------------





deactivate

sudo nano /etc/systemd/system/network-switch.service

*****

[Unit]
Description=Switch Network Mode at Startup

[Service]
Type=simple
ExecStart=/usr/bin/python3 /etc/network_mode.py

[Install]
WantedBy=multi-user.target

****

sudo systemctl enable network-switch.service
sudo systemctl start network-switch.service

sudo nano /etc/network_mode.py

# copy directly from vnc

sudo chmod 777 /etc/network_mode.py

sudo chmod 777 /etc/network_mode.conf
sudo nano /etc/network_mode.conf

***
wifi
****


sudo chmod 777 /etc/dhcpcd.conf
sudo nano /etc/dhcpcd.conf

*******
# A sample configuration for dhcpcd.
# See dhcpcd.conf(5) for details.

# Allow users of this group to interact with dhcpcd via the control socket.
#controlgroup wheel

# Inform the DHCP server of our hostname for DDNS.
hostname
#pi_zero

# Use the hardware address of the interface for the Client ID.
clientid
# or
# Use the same DUID + IAID as set in DHCPv6 for DHCPv4 ClientID as per RFC4361.
# Some non-RFC compliant DHCP servers do not reply with this set.
# In this case, comment out duid and enable clientid above.
#duid

# Persist interface configuration when dhcpcd exits.
persistent

# Rapid commit support.
# Safe to enable by default because it requires the equivalent option set
# on the server to actually work.
option rapid_commit

# A list of options to request from the DHCP server.
option domain_name_servers, domain_name, domain_search, host_name
option classless_static_routes
# Respect the network MTU. This is applied to DHCP routes.
option interface_mtu

# Most distributions have NTP support.
#option ntp_servers

# A ServerID is required by RFC2131.
require dhcp_server_identifier

# Generate SLAAC address using the Hardware Address of the interface
#slaac hwaddr
# OR generate Stable Private IPv6 Addresses based from the DUID
slaac private

# Example static IP configuration:
#interface eth0
#static ip_address=192.168.0.10/24
#static ip6_address=fd51:42f8:caae:d92e::ff/64
#static routers=192.168.0.1
#static domain_name_servers=192.168.0.1 8.8.8.8 fd51:42f8:caae:d92e::1

# It is possible to fall back to a static IP if DHCP fails:
# define static profile
#profile static_eth0
#static ip_address=192.168.1.23/24
#static routers=192.168.1.1
#static domain_name_servers=192.168.1.1

# fallback to static profile on eth0

#interface eth0
#fallback static_eth0
#interface wlan0
#static ip_address=192.168.4.1/24
#nohook wpa_supplicant
********



sudo apt install hostapd



sudo chmod 777 /etc/hostapd/hostapd.conf
sudo nano /etc/hostapd/hostapd.conf
*******
#Set wireless interface
interface=wlan0
#driver
driver=nl80211
hw_mode=g
channel=6
ieee80211n=1
wmm_enabled=0
macaddr_acl=0
ignore_broadcast_ssid=0
auth_algs=1
wpa=2
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
#Set network name
ssid=pi_zero
wpa_passphrase=Pi_zer0!

*******



sudo systemctl unmask hostapd
sudo systemctl enable hostapd
sudo systemctl start hostapd

sudo apt install dnsmasq


sudo chmod 777 /etc/dnsmasq.conf
sudo nano /etc/dnsmasq.conf
*******
interface=wlan0       # Use interface wlan0
dhcp-range=192.168.4.2,192.168.4.150,255.255.255.0,24h # IP range and lease time
domain=wlan
address=/gw.wlan/192.168.4.1
*******



sudo systemctl enable dnsmasq
sudo systemctl start dnsmasq

sudo nano users_mgmt/connect_mgmt/wificonfig.py

[see file]



sudo chmod 777 /etc/hostapd/hostapd.conf

sudo chmod 777 /home/stefano/log_pi.txt

sudo chmod 777 /etc/wpa_supplicant/wpa_supplicant.conf
